package

package api {
    @api.ExperimentalBinaryAPI public fun binary(): kotlin.Unit
    @api.ExperimentalSourceOnlyAPI public fun sourceOnly(): kotlin.Unit

    @kotlin.Experimental(level = ExperimentalLevel.WARNING, scope = ExperimentalScope.BINARY) public final annotation class ExperimentalBinaryAPI : kotlin.Annotation {
        public constructor ExperimentalBinaryAPI()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    @kotlin.Experimental(level = ExperimentalLevel.WARNING, scope = ExperimentalScope.SOURCE_ONLY) public final annotation class ExperimentalSourceOnlyAPI : kotlin.Annotation {
        public constructor ExperimentalSourceOnlyAPI()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

package usage {
    public var inlineUse2: kotlin.Unit
    public var inlineUse3: kotlin.Unit
    public val use2: kotlin.Unit
    public val use3: kotlin.Unit
    public inline fun inlineUse1(): kotlin.Unit
    @api.ExperimentalSourceOnlyAPI @api.ExperimentalBinaryAPI public inline fun inlineUse4(): kotlin.Unit
    public fun use1(): kotlin.Unit
}
